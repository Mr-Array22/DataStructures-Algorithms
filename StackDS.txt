#include <iostream>
using namespace std;

//capcity for stack
const int MAX_SIZE = 100;
//make stack generic(dynmaic) to accept any type of data
template <class t>

class stack {
    int top;
    t item[MAX_SIZE];

public:
    //constructor
    stack() {
        top = -1;
    }

    //add element to stack
    void push(t element) {

        if (top >= MAX_SIZE - 1) {
            cout << "Stack Full";
        }
        else {
            top++;
            item[top] = element;
            //or in one step
            //item[++top] = element;
        }
       

    }

    //check if stack empty or not
    bool isEmpty() {

        //solution 1
        //if (top == -1)
        //    return true;
        //else
        //    return false;

        //solution 2
        //if (top == -1)
        //    return 1;
        //else
        //    return 0;

        //solution 3
        return top < 0;
    }

    //delete element from stack
    void pop() {

        if(isEmpty())
            cout<<"Stack Empty";
        else 
            top--;
      

    }

    //delete element from stack and keep it in variable
    void pop(t &element) {

        if (isEmpty())
            cout << "Stack Empty";
        else {
            element = item[top];
            top--;
        }


    }

    //get the last element entered to stack
    void getTop(t& stackTop) {

        if (isEmpty())
            cout << "Stack Empty";
        else {
            stackTop = item[top];
        }


    }

    //print stack content
    void print() {
        cout << "[";
        for (int i = top; i >=0 ; i--)
        {
            cout << item[i] << " ";
        }
        cout << "]";
        cout << endl;
    }

    //check if stack full or not
    bool isFull() {
        return  top == MAX_SIZE-1 ;
    }


};



int main()
{
    stack<char> s;
    s.push('a');
    s.push('b');
    s.push('c');
    s.push('d');
    s.push('e');
    s.pop();
    s.push('f');
    s.print();
    char y ;
    s.getTop(y);
    cout<<y;
}


