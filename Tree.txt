#include <iostream>
#include <queue>
#include <cassert>
using namespace std;

struct Node
{
	int item;
	Node* right;
	Node* left;
};

class BST {

private:
	Node* root;


public:
	BST() {
		root = NULL;
	}

	bool isEmpyt() {
		return root == NULL;
	}

	void  clear(Node*& p) {
		if (p != NULL) {
			clear(p->left);
			clear(p->right);
			delete p;
			p = NULL;
		}
	}

	void  clearTree() {
		clear(root);
	}

	int Height(Node* p)
	{
		if (p == NULL)
			return 0;
		else
			return 1 + max(Height(p->left), Height(p->right));
	}

	int max(int x, int y) {
		if (x >= y)
			return x;
		else
			return y;
	}

	int nodeCount(Node* p)
	{
		if (p == NULL)
			return 0;
		else
			return 1 + nodeCount(p->left) + nodeCount(p->right);
	}

	int leavesCount(Node* p)
	{
		if (p == NULL)
			return 0;
		else if ((p->left == NULL) && (p->right == NULL))
			return 1;
		else
			return leavesCount(p->left) + leavesCount(p->right);
	}

	bool search(int item)
	{
		Node* current = root;

		while (current != NULL)
		{
			if (current->item == item)
				return true;
			else if (current->item > item)
				current = current->left;
			else
				current = current->right;
		}

		return false;
	}

	void insert(int item)
	{
		Node* current;  //pointer to traverse the tree
		Node* trailCurrent; //pointer behind current
		Node* newNode;  //pointer to create the node

		newNode = new Node;
		assert(newNode != NULL);
		newNode->item = item;
		newNode->left = NULL;
		newNode->right = NULL;

		if (root == NULL)
			root = newNode;
		else
		{
			current = root;

			while (current != NULL)
			{
				trailCurrent = current;

				if (current->item == item)
				{
					cout << "The insert item is already in the list -- ";
					cout << "duplicates are not allowed." << endl;
					return;
				}
				else
					if (current->item > item)
						current = current->left;
					else
						current = current->right;
			}//end while

			if (trailCurrent->item > item)
				trailCurrent->left = newNode;
			else
				trailCurrent->right = newNode;
		}
	}

	void remove(int item)
	{
		Node* current;  //pointer to traverse the tree
		Node* trailCurrent; //pointer behind current

		if (root == NULL)
		{
			cout << "Cannot delete from the empty tree." << endl;
			return;
		}
		if (root->item == item)
		{
			deleteFromTree(root);
			return;
		}

		//if you get here, then the item to be deleted is not the root
		trailCurrent = root;

		if (root->item > item)
			current = root->left;
		else
			current = root->right;

		//search for the item to be deleted.
		while (current != NULL)
		{
			if (current->item == item)
				break;
			else
			{
				trailCurrent = current;
				if (current->item > item)
					current = current->left;
				else
					current = current->right;
			}
		}// once the while is done, current points to either NULL or to the node to be deleted

		if (current == NULL)
			cout << "The delete item is not in the tree." << endl;
		else if (trailCurrent->item > item)
			deleteFromTree(trailCurrent->left);
		else
			deleteFromTree(trailCurrent->right);
	}

	void deleteFromTree(Node*& p)
	{
		Node* current;    //pointer to traverse
										//the tree
		Node* trailCurrent;   //pointer behind current
		Node* temp;        //pointer to delete the node

		if (p->left == NULL && p->right == NULL)
		{
			delete p;
			p = NULL;
		}
		else if (p->left == NULL)
		{
			temp = p;
			p = p->right;
			delete temp;
		}
		else if (p->right == NULL)
		{
			temp = p;
			p = p->left;
			delete temp;
		}
		else
		{
			current = p->left;
			trailCurrent = NULL;

			while (current->right != NULL)
			{
				trailCurrent = current;
				current = current->right;
			}//end while

			p->item = current->item;

			if (trailCurrent == NULL) //current did not move;
									 //current == p->left; adjust p
				p->left = current->left;
			else
				trailCurrent->right = current->left;

			delete current;
		}//end else
	}//end deleteFromTree

	void inorderTraversal()
	{
		inOrder(root);
	}


	void preorderTraversal()
	{
		preOrder(root);
	}


	void postorderTraversal()
	{
		postOrder(root);
	}


	int treeHeight()
	{
		return Height(root);
	}


	int treeNodeCount()
	{
		return nodeCount(root);
	}


	int treeLeavesCount()
	{
		return leavesCount(root);
	}



	void preOrder(Node* p) {
		if (p != NULL) {
			cout << p->item << " ";
			preOrder(p->left);
			preOrder(p->right);
		}
	}

	void inOrder(Node* p) {
		if (p != NULL) {
			inOrder(p->left);
			cout << p->item << " ";
			inOrder(p->right);
		}
	}

	void postOrder(Node* p) {
		if (p != NULL) {
			postOrder(p->left);
			postOrder(p->right);
			cout << p->item << " ";
		}
	}

	void levelOrder(Node* root) {
		if (root == NULL)
			return;
		queue<Node*> Q;
		Q.push(root);
		while (!Q.empty())
		{
			Node* curr = Q.front();
			cout << curr->item << " ";
			if (curr->left != NULL)
				Q.push(curr->left);
			if (curr->right != NULL)
				Q.push(curr->right);
			Q.pop();
		}
	}

};

int main()
{
	BST tr;
	tr.insert(10);
	tr.insert(20);
	tr.insert(30);
	tr.insert(60);
	tr.insert(50);

	cout << tr.treeHeight();
	cout<<endl;
	tr.inorderTraversal();
	cout<<endl;
	tr.postorderTraversal();
	cout<<endl;
	tr.preorderTraversal();
	cout<<endl;
	cout<<tr.search(50);
	cout<<endl;
	cout<<tr.search(900);

}

