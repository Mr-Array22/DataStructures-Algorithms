#include <iostream>
using namespace std;



class LinkedList {
    struct Node {
        int item;
        Node* next;
    };
    Node* head;
    Node* tail;
    int length;



public:
    LinkedList() {
        head = tail = NULL;
        length = 0;
    }

    bool isEmpty() {
        return length == 0;
    }

    bool isFull() {
        return 0;
    }

    void insertFirst(int element) {
        Node* newnode = new Node;
        newnode->item = element;
        if (length == 0)
        {
            head = tail = newnode;
            newnode->next = NULL;
        }
        else {
            newnode->next = head;
            head = newnode;
            
        }
        length++;
    }

    void insertLast(int element) {
        Node* newnode;
        newnode = new Node;
        newnode->item = element;
        if (length == 0) {
            head = tail = newnode;
            newnode->next = NULL;
        }
        else {
            tail->next = newnode;
            newnode->next = NULL;
            tail = newnode;
        }
        length++;
    }

    void insertAtpos(int pos,int element) {
        if (pos<0 || pos>length)
            cout << "Out of range";
        else {
            Node* newnode = new Node;
            newnode->item = element;
            if (pos == 0)
                insertFirst(element);
            else if (pos == length)
                insertLast(element);
            else {
                Node* cur = head;
                for (int i = 1; i < pos; i++)
                {
                    cur = cur->next;
                }
                newnode->next = cur->next;
                cur->next = newnode;
                length++;
            }



        }
    }

    void print() {
        Node* cur = head;
        while (cur!=NULL)
        {
            cout << cur->item << " ";
            cur=cur->next;
        }
    }

    int getSize() {
        return length;
    }

    void removeFirst() {
        if (length == 0)
            cout << "Empty list";
        else if (length == 1) {
            delete head;
            head = tail = NULL;
            length--;
        }
        else {
            Node* cur = head;
            head = head->next;
            delete cur;
            length--;
        }
     }

    void removeLast() {
        if (length == 0)
            cout << "List is empty";
        else if (length == 1) {
            delete head;
            head = tail = NULL;
            length--;
        }
        else {
            Node* cur=head->next;
            Node* prv=head;
            while (cur!=tail)
            {
                prv = cur;
                cur = cur->next;
            }
            delete cur;
            prv->next = NULL;
            tail = prv;
            length--;
        }
    }

    void remove(int element) {
        if (isEmpty()) {
            cout << "list empty";
            return;
        }
        Node* cur, *prev;
        if (head->item == element) {
            cur = head;
            head = head->next;
            delete cur;
            length--;
            if (length == 0)
                tail = NULL;
        }
        else {
            cur = head->next;
            prev = head;
            while (cur!=NULL)
            {
                if (cur->item == element)
                    break;
                prev = cur;
                cur = cur->next;
            }
            if (cur == NULL)
                cout << "element ot found";
            else {
                prev->next = cur->next;
                if (tail == cur)
                    tail = prev;
                delete cur;
                length--;
            }
        }
    }

    void reverse() {
        Node* prev, * next, * curr;
        prev = NULL;
        curr = head;
        next = curr->next;
        while (next!=NULL)
        {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        head = prev;
    }


    int search(int element) {
        Node* curr=head;
        int pos = 0;
        while (curr!=NULL)
        {
            if (curr->item == element)
                return pos;
            curr = curr->next;
            pos++;
        }
        return -1;
    }
};


int main()
{
    LinkedList l;
    l.insertFirst(10);
    l.insertLast(30);
    l.insertLast(40);
    l.insertAtpos(1, 20);
    l.insertFirst(0);
    l.insertLast(50);
    //l.removeFirst();
    //l.removeLast();
    //l.reverse();
    l.print();
    cout << endl;
    cout << l.search(90);
}

